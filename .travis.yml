language: cpp
sudo: false

branches:
  except:
  - /appveyor.*/

common_sources: &all_sources
  - ubuntu-toolchain-r-test
  - llvm-toolchain-trusty
  - llvm-toolchain-trusty-3.9
  - llvm-toolchain-trusty-4.0
  - llvm-toolchain-trusty-5.0
  - llvm-toolchain-trusty-6.0


matrix:
  include:
    - os: linux
      compiler: clang
      addons:
          apt:
              sources: *all_sources
              packages: ['clang-3.5']
      env: COMPILER='clang++-3.5'

    - os: linux
      compiler: clang
      addons:
          apt:
              sources: *all_sources
              packages: ['clang-6.0']
      env: COMPILER='clang++-6.0'

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: *all_sources
          packages: ['g++-4.8', 'lcov']
      env: COMPILER='g++-4.8' CODECOV=1

    - os: linux
      compiler: gcc
      addons: &gcc8
        apt:
          sources: *all_sources
          packages: ['g++-8']
      env: COMPILER='g++-8'

    - os: osx
      osx_image: xcode7.3
      compiler: clang
      env: COMPILER='clang++'

    - os: osx
      osx_image: xcode9.1
      compiler: clang
      env: COMPILER='clang++'

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        which cmake || brew install cmake;
    fi


before_script:
  - export CXX=${COMPILER}
  - cd ${TRAVIS_BUILD_DIR}

script:
  - cmake -H. -Bbuild/release -DCMAKE_BUILD_TYPE=Debug -DBOOLSATLIB_ENABLE_COVERAGE=${CODECOV}
  - cd build/release
  - make -j 2
  - CTEST_OUTPUT_ON_FAILURE=1 ctest -j 2
  - cd ../..
  - cmake -H. -Bbuild/debug -DCMAKE_BUILD_TYPE=Debug -DBOOLSATLIB_ENABLE_COVERAGE=${CODECOV}
  - cd build/debug
  - make -j 2
  - CTEST_OUTPUT_ON_FAILURE=1 ctest -j 2
  - |
    if [[ "${CODECOV}" == "1" ]]; then
      make gcov
      make lcov
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
    fi
